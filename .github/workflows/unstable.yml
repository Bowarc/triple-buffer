# Evil twin of main.yml which checks that triple-buffer remains compatible with
# latest Rust developments every once in a while.
#
# NOTE: It's useless to cache the target folder on this rare workflow since it
#       would usually be invalidated by 1/how rarely the job runs and
#       2/how frequently new nightly and beta versions come out.
#
# FIXME: For now, must be manually kept in sync with main.yml

on:
  schedule:
    - cron: '0 0 1,15 * *'

name: Unstable Rust CI

env:
  RUSTFLAGS: -D warnings

jobs:
  # Formatter output and lints don't depend on the operating system, and only
  # need to be tested on nightly since we don't care about older expectations.
  format:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: rustfmt

      - name: Check format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check


  # Clippy and rustc lints depend on cargo features, but not on the operating
  # system. We don't care about warnings on the minimum supported Rust version,
  # only about building and running correctly.
  lints:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        features:
          - ''
          - raw

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: clippy

      - name: Cache Cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: cargo-registry-lock_${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-registry

      - name: Cache Cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: cargo-index-lock_${{ hashFiles('**/Cargo.lock') }}
          restore_keys: |
            cargo-index

      - name: Type-check the program
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --features "${{ matrix.features }}"

      - name: Check clippy lints
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --features "${{ matrix.features }}" -- -D warnings


  # Run the tests on all supported OSes and Rust versions, for all features
  test:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        rust:
          - beta
          - nightly
        features:
          - ''
          - raw

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      - name: Cache Cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: cargo-registry-lock_${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-registry

      - name: Cache Cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: cargo-index-lock_${{ hashFiles('**/Cargo.lock') }}
          restore_keys: |
            cargo-index

      - name: Run basic tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --features "${{ matrix.features }}"

      - name: Run concurrent tests and benchmarks
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --features "${{ matrix.features }}" --release -- --ignored --nocapture --test-threads=1
