# Based on templates from https://github.com/actions-rs
#
# NOTE: We don't cache the toolchain because bringing back the cache was
#       measured to take more time than downloading the toolchain on Github's
#       current setup. And it also brought suspicious file permission warnings
#       on unpacking...
#
# FIXME: For now, must be manually kept in sync with unstable.yml

on: [push, pull_request]

name: Main CI

env:
  RUSTFLAGS: -D warnings

jobs:
  # Formatter output doesn't depend on the operating system or cargo features,
  # and only need to be tested on stable as we don't care about older norms.
  format:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt

      - name: Check format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check


  # Clippy and rustc lints depend on cargo features, but not on the operating
  # system. We don't care about warnings on the minimum supported Rust version,
  # only about building and running correctly.
  lints:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        features:
          - ''
          - raw

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy

      - name: Cache Cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: cargo-registry-lock_${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            cargo-registry

      - name: Cache Cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: cargo-index-lock_${{ hashFiles('**/Cargo.toml') }}
          restore_keys: |
            cargo-index

      - name: Cache Cargo check target directory
        uses: actions/cache@v1
        with:
          path: target
          key: cargo-target_check-rust_${{ steps.toolchain.outputs.rustc_hash }}-features_${{ matrix.features }}-lock_${{ hashFiles('**/Cargo.toml') }}
          restore_keys: |
            cargo-target_check-rust_${{ steps.toolchain.outputs.rustc_hash }}-features_${{ matrix.features }}
            cargo-target_check-rust_${{ steps.toolchain.outputs.rustc_hash }}

      - name: Type-check the program
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --features "${{ matrix.features }}"

      - name: Check clippy lints
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --features "${{ matrix.features }}" -- -D warnings


  # Run the tests on all supported OSes and Rust versions, for all features
  test:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        rust:
          - stable
          - 1.34.0  # Minimum supported Rust version
        features:
          - ''
          - raw

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      - name: Cache Cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: cargo-registry-lock_${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            cargo-registry

      - name: Cache Cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: cargo-index-lock_${{ hashFiles('**/Cargo.toml') }}
          restore_keys: |
            cargo-index

      - name: Cache Cargo test target directory
        uses: actions/cache@v1
        with:
          path: target
          key: cargo-target_test-os_${{ runner.os }}-rust_${{ steps.toolchain.outputs.rustc_hash }}-features_${{ matrix.features }}-lock_${{ hashFiles('**/Cargo.toml') }}
          restore_keys: |
            cargo-target_test-os_${{ runner.os }}-rust_${{ steps.toolchain.outputs.rustc_hash }}-features_${{ matrix.features }}
            cargo-target_test-os_${{ runner.os }}-rust_${{ steps.toolchain.outputs.rustc_hash }}

      - name: Run basic tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --tests --features "${{ matrix.features }}"

      - name: Run concurrent tests and benchmarks
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --features "${{ matrix.features }}" --release -- --ignored --nocapture --test-threads=1
